Description: Merge all changes from upstream git from 2014
Author: Mateusz ≈Åukasik <mati75@linuxmint.pl>
Last-Update: 2020-09-20
Forwarded: not-needed

--- a/Makefile
+++ b/Makefile
@@ -2,7 +2,7 @@ PREFIX?=/usr/X11R6
 CFLAGS?=-Os -pedantic -Wall
 
 all:
-	$(CC) $(CFLAGS) -I$(PREFIX)/include -L$(PREFIX)/lib -lX11 -o tinywm tinywm.c
+	$(CC) $(CFLAGS) -I$(PREFIX)/include tinywm.c -L$(PREFIX)/lib -lX11 -o tinywm
 
 clean:
 	rm -f tinywm
--- a/README
+++ b/README
@@ -1,4 +1,6 @@
-TinyWM is written by Nick Welch <mack@incise.org>, 2005.
+TinyWM is written by Nick Welch <nick@incise.org> in 2005 & 2011.
+
+This software is in the public domain and is provided AS IS, with NO WARRANTY.
 
 TinyWM is a ridiculously tiny window manager implemented in nearly as few lines
 of C as possible, without being obfuscated or entirely useless. It allows you
@@ -22,26 +24,15 @@ Usage:
 
 Misc:
   
-  A fella by the name of Trent Buck made a lisp version:
-
-    http://twb.ath.cx/~twb/src/misc/tinywm.lisp
-
-  I have started a wiki about window manager development, although I'm not sure
-  the subject is popular enough for the wiki to keep from dying a horrible
-  death.  In any case, it is here:
-
-    http://riters.com/WMDev/
-
   Another very small window manager is failsafewm.  Originally I started
   hacking on it, as there was quite a bit of stuff in it that I thought was
-  unneeded, and I wound up rewriting it from scratch, with just the bare
-  necessities -- that's TinyWM.
+  unneeded.  I wound up rewriting it from scratch, with just the bare
+  necessities, and that became TinyWM.
 
     http://freshmeat.net/projects/failsafewm/
 
-  Yet another small -- but in comparison, big -- window manager is aewm.  It's
-  a good example for learning about window management, and the fact that so
-  many WMs have spawned from it is proof.
+  Yet another small -- but in comparison to TinyWM, big -- window manager is
+  aewm.  It's a good example for learning about writing a window manager.
 
       http://www.red-bean.com/~decklin/aewm/
 
--- a/annotated.c
+++ b/annotated.c
@@ -1,4 +1,4 @@
-/* TinyWM is written by Nick Welch <mack@incise.org>, 2005.
+/* TinyWM is written by Nick Welch <nick@incise.org> in 2005 & 2011.
  *
  * This software is in the public domain
  * and is provided AS IS, with NO WARRANTY. */
@@ -22,10 +22,9 @@
 
 #define MAX(a, b) ((a) > (b) ? (a) : (b))
 
-int main()
+int main(void)
 {
     Display * dpy;
-    Window root;
     XWindowAttributes attr;
 
     /* we use this to save the pointer's state at the beginning of the
@@ -35,11 +34,10 @@ int main()
 
     XEvent ev;
 
-
     /* return failure status if we can't connect */
     if(!(dpy = XOpenDisplay(0x0))) return 1;
 
-    /* you'll usually be referencing the root window a lot.  this is a somewhat
+    /* we use DefaultRootWindow to get the root window, which is a somewhat
      * naive approach that will only work on the default screen.  most people
      * only have one screen, but not everyone.  if you run multi-head without
      * xinerama then you quite possibly have multiple screens. (i'm not sure
@@ -53,7 +51,6 @@ int main()
      * if they set $DISPLAY to ":0.foo", then our default screen number is
      * whatever they specify "foo" as.
      */
-    root = DefaultRootWindow(dpy);
 
     /* you could also include keysym.h and use the XK_F1 constant instead of
      * the call to XStringToKeysym, but this method is more "dynamic."  imagine
@@ -70,8 +67,8 @@ int main()
      * to X.  so we never want to hard-code keycodes, because they can and will
      * differ between systems.
      */
-    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym("F1")), Mod1Mask, root,
-            True, GrabModeAsync, GrabModeAsync);
+    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym("F1")), Mod1Mask,
+            DefaultRootWindow(dpy), True, GrabModeAsync, GrabModeAsync);
 
     /* XGrabKey and XGrabButton are basically ways of saying "when this
      * combination of modifiers and key/button is pressed, send me the events."
@@ -81,11 +78,12 @@ int main()
      * XSelectInput with KeyPressMask/ButtonPressMask/etc to catch all events
      * of those types and filter them as you receive them.
      */
-    XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
-            GrabModeAsync, None, None);
-    XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
-            GrabModeAsync, None, None);
+    XGrabButton(dpy, 1, Mod1Mask, DefaultRootWindow(dpy), True,
+            ButtonPressMask|ButtonReleaseMask|PointerMotionMask, GrabModeAsync, GrabModeAsync, None, None);
+    XGrabButton(dpy, 3, Mod1Mask, DefaultRootWindow(dpy), True,
+            ButtonPressMask|ButtonReleaseMask|PointerMotionMask, GrabModeAsync, GrabModeAsync, None, None);
 
+    start.subwindow = None;
     for(;;)
     {
         /* this is the most basic way of looping through X events; you can be
@@ -110,13 +108,6 @@ int main()
             XRaiseWindow(dpy, ev.xkey.subwindow);
         else if(ev.type == ButtonPress && ev.xbutton.subwindow != None)
         {
-            /* now we take command of the pointer, looking for motion and
-             * button release events.
-             */
-            XGrabPointer(dpy, ev.xbutton.subwindow, True,
-                    PointerMotionMask|ButtonReleaseMask, GrabModeAsync,
-                    GrabModeAsync, None, None, CurrentTime);
-
             /* we "remember" the position of the pointer at the beginning of
              * our move/resize, and the size/position of the window.  that way,
              * when the pointer moves, we can compare it to our initial data
@@ -125,24 +116,26 @@ int main()
             XGetWindowAttributes(dpy, ev.xbutton.subwindow, &attr);
             start = ev.xbutton;
         }
-        /* the only way we'd receive a motion notify event is if we already did
-         * a pointer grab and we're in move/resize mode, so we assume that. */
-        else if(ev.type == MotionNotify)
+        /* we only get motion events when a button is being pressed,
+         * but we still have to check that the drag started on a window */
+        else if(ev.type == MotionNotify && start.subwindow != None)
         {
-            int xdiff, ydiff;
-
-            /* here we "compress" motion notify events.  if there are 10 of
-             * them waiting, it makes no sense to look at any of them but the
-             * most recent.  in some cases -- if the window is really big or
-             * things are just acting slowly in general -- failing to do this
-             * can result in a lot of "drag lag."
+            /* here we could "compress" motion notify events by doing:
+             *
+             * while(XCheckTypedEvent(dpy, MotionNotify, &ev));
+             *
+             * if there are 10 of them waiting, it makes no sense to look at
+             * any of them but the most recent.  in some cases -- if the window
+             * is really big or things are just acting slowly in general --
+             * failing to do this can result in a lot of "drag lag," especially
+             * if your wm does a lot of drawing and whatnot that causes it to
+             * lag.
              *
              * for window managers with things like desktop switching, it can
              * also be useful to compress EnterNotify events, so that you don't
              * get "focus flicker" as windows shuffle around underneath the
              * pointer.
              */
-            while(XCheckTypedEvent(dpy, MotionNotify, &ev));
 
             /* now we use the stuff we saved at the beginning of the
              * move/resize and compare it to the pointer's current position to
@@ -160,20 +153,18 @@ int main()
              * exactly zero, triggering an X error.  so we specify a minimum
              * width/height of 1 pixel.
              */
-            xdiff = ev.xbutton.x_root - start.x_root;
-            ydiff = ev.xbutton.y_root - start.y_root;
-            XMoveResizeWindow(dpy, ev.xmotion.window,
+            int xdiff = ev.xbutton.x_root - start.x_root;
+            int ydiff = ev.xbutton.y_root - start.y_root;
+            XMoveResizeWindow(dpy, start.subwindow,
                 attr.x + (start.button==1 ? xdiff : 0),
                 attr.y + (start.button==1 ? ydiff : 0),
                 MAX(1, attr.width + (start.button==3 ? xdiff : 0)),
                 MAX(1, attr.height + (start.button==3 ? ydiff : 0)));
         }
-        /* like motion notifies, the only way we'll receive a button release is
-         * during a move/resize, due to our pointer grab.  this ends the
-         * move/resize.
-         */
         else if(ev.type == ButtonRelease)
-            XUngrabPointer(dpy, CurrentTime);
+        {
+            start.subwindow = None;
+        }
     }
 }
 
--- a/tinywm.c
+++ b/tinywm.c
@@ -1,4 +1,4 @@
-/* TinyWM is written by Nick Welch <mack@incise.org>, 2005.
+/* TinyWM is written by Nick Welch <nick@incise.org> in 2005 & 2011.
  *
  * This software is in the public domain
  * and is provided AS IS, with NO WARRANTY. */
@@ -7,25 +7,23 @@
 
 #define MAX(a, b) ((a) > (b) ? (a) : (b))
 
-int main()
+int main(void)
 {
     Display * dpy;
-    Window root;
     XWindowAttributes attr;
     XButtonEvent start;
     XEvent ev;
 
     if(!(dpy = XOpenDisplay(0x0))) return 1;
 
-    root = DefaultRootWindow(dpy);
-
-    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym("F1")), Mod1Mask, root,
-            True, GrabModeAsync, GrabModeAsync);
-    XGrabButton(dpy, 1, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
-            GrabModeAsync, None, None);
-    XGrabButton(dpy, 3, Mod1Mask, root, True, ButtonPressMask, GrabModeAsync,
-            GrabModeAsync, None, None);
+    XGrabKey(dpy, XKeysymToKeycode(dpy, XStringToKeysym("F1")), Mod1Mask,
+            DefaultRootWindow(dpy), True, GrabModeAsync, GrabModeAsync);
+    XGrabButton(dpy, 1, Mod1Mask, DefaultRootWindow(dpy), True,
+            ButtonPressMask|ButtonReleaseMask|PointerMotionMask, GrabModeAsync, GrabModeAsync, None, None);
+    XGrabButton(dpy, 3, Mod1Mask, DefaultRootWindow(dpy), True,
+            ButtonPressMask|ButtonReleaseMask|PointerMotionMask, GrabModeAsync, GrabModeAsync, None, None);
 
+    start.subwindow = None;
     for(;;)
     {
         XNextEvent(dpy, &ev);
@@ -33,26 +31,21 @@ int main()
             XRaiseWindow(dpy, ev.xkey.subwindow);
         else if(ev.type == ButtonPress && ev.xbutton.subwindow != None)
         {
-            XGrabPointer(dpy, ev.xbutton.subwindow, True,
-                    PointerMotionMask|ButtonReleaseMask, GrabModeAsync,
-                    GrabModeAsync, None, None, CurrentTime);
             XGetWindowAttributes(dpy, ev.xbutton.subwindow, &attr);
             start = ev.xbutton;
         }
-        else if(ev.type == MotionNotify)
+        else if(ev.type == MotionNotify && start.subwindow != None)
         {
-            int xdiff, ydiff;
-            while(XCheckTypedEvent(dpy, MotionNotify, &ev));
-            xdiff = ev.xbutton.x_root - start.x_root;
-            ydiff = ev.xbutton.y_root - start.y_root;
-            XMoveResizeWindow(dpy, ev.xmotion.window,
+            int xdiff = ev.xbutton.x_root - start.x_root;
+            int ydiff = ev.xbutton.y_root - start.y_root;
+            XMoveResizeWindow(dpy, start.subwindow,
                 attr.x + (start.button==1 ? xdiff : 0),
                 attr.y + (start.button==1 ? ydiff : 0),
                 MAX(1, attr.width + (start.button==3 ? xdiff : 0)),
                 MAX(1, attr.height + (start.button==3 ? ydiff : 0)));
         }
         else if(ev.type == ButtonRelease)
-            XUngrabPointer(dpy, CurrentTime);
+            start.subwindow = None;
     }
 }
 
--- a/tinywm.py
+++ b/tinywm.py
@@ -1,4 +1,4 @@
-# TinyWM is written by Nick Welch <mack@incise.org>, 2005.
+# TinyWM is written by Nick Welch <nick@incise.org> in 2005 & 2011.
 #
 # This software is in the public domain
 # and is provided AS IS, with NO WARRANTY.
@@ -7,34 +7,30 @@ from Xlib.display import Display
 from Xlib import X, XK
 
 dpy = Display()
-root = dpy.screen().root
 
-root.grab_key(XK.string_to_keysym("F1"), X.Mod1Mask, 1,
+dpy.screen().root.grab_key(dpy.keysym_to_keycode(XK.string_to_keysym("F1")), X.Mod1Mask, 1,
         X.GrabModeAsync, X.GrabModeAsync)
-root.grab_button(1, X.Mod1Mask, 1, X.ButtonPressMask,
+dpy.screen().root.grab_button(1, X.Mod1Mask, 1, X.ButtonPressMask|X.ButtonReleaseMask|X.PointerMotionMask,
         X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)
-root.grab_button(3, X.Mod1Mask, 1, X.ButtonPressMask,
+dpy.screen().root.grab_button(3, X.Mod1Mask, 1, X.ButtonPressMask|X.ButtonReleaseMask|X.PointerMotionMask,
         X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE)
 
+start = None
 while 1:
-    ev = root.display.next_event()
-
+    ev = dpy.next_event()
     if ev.type == X.KeyPress and ev.child != X.NONE:
-        ev.window.circulate(X.RaiseLowest)
+        ev.child.configure(stack_mode = X.Above)
     elif ev.type == X.ButtonPress and ev.child != X.NONE:
-        ev.child.grab_pointer(1, X.PointerMotionMask|X.ButtonReleaseMask,
-                X.GrabModeAsync, X.GrabModeAsync, X.NONE, X.NONE, X.CurrentTime)
         attr = ev.child.get_geometry()
         start = ev
-    elif ev.type == X.MotionNotify:
-        #while(XCheckTypedEvent(dpy, MotionNotify, &ev));
+    elif ev.type == X.MotionNotify and start:
         xdiff = ev.root_x - start.root_x
         ydiff = ev.root_y - start.root_y
-        ev.window.configure(
+        start.child.configure(
             x = attr.x + (start.detail == 1 and xdiff or 0),
             y = attr.y + (start.detail == 1 and ydiff or 0),
             width = max(1, attr.width + (start.detail == 3 and xdiff or 0)),
             height = max(1, attr.height + (start.detail == 3 and ydiff or 0)))
     elif ev.type == X.ButtonRelease:
-        dpy.ungrab_pointer(X.CurrentTime)
+        start = None
 
